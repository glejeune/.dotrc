snippet mod
	-module(`Filename()`).

snippet case
	case ${1:expression} of
	  ${2:pattern}${3: when ${4:guard}} ->
	    ${5:body};
	  Other ->
	    todo 
	end

snippet lc
	[${1:X} || ${2:X} <- ${3:List}${4:, gen}]

snippet try
	try${1: ${2:expression}${3: of
		${4:pattern}${5: when ${6:guard}} ->
			${7:body}}}
	${8:catch
		${9:pattern}${10: when ${11:guard}} ->
			${12:body}}
	${13:after
		${14:body}}
	end

snippet o4o
	-module(`Filename()`).
	-behaviour(supervisor).

	-export([start_link/0]).
	-export([init/1]).

	start_link() ->
	  supervisor:start_link({local, ?MODULE}, ?MODULE, []).

	init([]) ->
	  {ok, {
	    #{strategy => one_for_one,
	      intensity => 1
	      period => 5},
	    [
	      %% insert worker or supervisor
	    ]
	  }}.

snippet so4o
	-module(`Filename()`).
	-behaviour(supervisor).
	
	-export([
	         start_link/0
	         , stop_child/1
	         , start_child/1
	        ]).
	-export([init/1]).
	
	start_link() ->
	  supervisor:start_link({local, ?MODULE}, ?MODULE, []).
	
	stop_child(Pid) when is_pid(Pid) ->
	  supervisor:terminate_child(?MODULE, Pid).
	
	start_child(Args) ->
	  case supervisor:start_child(?MODULE, [Args]) of
	    {ok, Child, _} -> {ok, Child};
	    Other -> Other
	  end.
	
	init([]) ->
	  {ok, {
	     #{strategy => simple_one_for_one,
	       intensity => 0,
	       period => 1},
	     [
	      #{id => ${1:`Filename()`_srv},
	         start => {${1:`Filename()`_srv}, start_link, []},
	         type => worker,
	         shutdown => 5000}
	     ]
	    }}.

snippet worker
	#{id => ${1:change_me},
	  start => {${1:change_me}, start_link, []},
	  type => worker,
	  shutdown => 5000}

snippet supervisor
	#{id => ${1:change_me},
	  start => {${1:change_me}, start_link, []},
	  type => supervisor,
	  shutdown => 5000}

snippet gen_server
	-module(`Filename()`).
	-behaviour(gen_server).
	
	%% API
	-export([start_link/1]).
	
	%% gen_server callbacks
	-export([init/1
	         , handle_call/3
	         , handle_cast/2
	         , handle_info/2
	         , terminate/2
	         , code_change/3]).
	
	-define(SERVER, ?MODULE).
	
	-record(state, {
	         }).
	
	start_link(Args) ->
	  gen_server:start_link(?MODULE, Args, []).
	
	% @hidden
	init(_Args) ->
	  {ok, #state{
	         }}.
	
	% @hidden
	handle_call(_Request, _From, State) ->
	  Reply = ok,
	  {reply, Reply, State}.
	
	% @hidden
	handle_cast(_Msg, State) ->
	  {noreply, State}.
	
	% @hidden
	handle_info(_Info, State) ->
	  {noreply, State}.
	
	% @hidden
	terminate(_Reason, _State) ->
	  ok.
	
	% @hidden
	code_change(_OldVsn, State, _Extra) ->
	  {ok, State}.

